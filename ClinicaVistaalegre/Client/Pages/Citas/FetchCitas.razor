@page "/fetchcitas"
@using ClinicaVistaalegre.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using ClinicaVistaalegre.Shared
@using System.Security.Claims
@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Citas</PageTitle>

<h1>Listar citas</h1>

<div>
    <a class="btn btn-outline-info" href="creacitas">Nueva cita</a>
</div>

@if (citas == null)
{
    <p><em>Cargando...</em></p>
}
else if (citas.Count == 0)
{
    <text>No hay citas</text>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Operaciones</th>
                <th>Motivo</th>
                <th>Médico</th>
                <th>Fecha y hora</th>
                <th>Estado</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cita in citas)
            {
                @switch (cita.Estado)
                {
                    case "Cancelada": case "Pasada":
                        rowClass = "table-secondary";
                        break;
                    case "Pendiente":
                        rowClass="";
                        break;
                    default:
                        rowClass = "table-info";
                        break;
                }

                <tr class="@rowClass">
                    <td class="align-middle">
                        <a class="btn btn-info" href="updatecitas/@cita.Id" style="@(cita.Estado.Equals("Cancelada")||cita.Estado.Equals("Pasada") ? "pointer-events: none" : "")">Editar</a>
                        <a class="btn btn-light" @onclick="(() => BorrarCita(cita.Id))">Borrar</a>
                    </td>
                    <td class="align-middle">@cita.Motivo</td>
                    <td class="align-middle">@cita.Medico.Apellidos</td>
                    <td class="align-middle">@cita.FechaHora</td>
                    <td class="align-middle">@cita.Estado</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string _userId;
    private List<Cita>? citas;
    private string rowClass = "";

    protected override async Task OnInitializedAsync()
    {
        GetClaimsPrincipalData();

        citas = await getCitas();
    }

    private async Task BorrarCita(int CitaId)
    {
        var citaBorrada = citas.First(x => x.Id == CitaId);
        string confirmacion = $"¿Deseas borrar la cita con motivo:\n{citaBorrada.Motivo}?";
        if (await JS.InvokeAsync<bool>("confirm", confirmacion))
        {
            await Http.DeleteAsync($"api/Citas/{CitaId}");
            citas = await getCitas();
        }
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private async Task<List<Cita>> getCitas()
    {
        List<Cita> _citas = new List<Cita>();
        try
        {
            _citas = await Http.GetFromJsonAsync<List<Cita>>($"api/Citas/ByPaciente/{_userId}");

            foreach (var cita in _citas)
            {
                if (cita.Medico == null)
                {
                    cita.Medico = await Http.GetFromJsonAsync<Medico>($"api/Medicos/{cita.MedicoId}");
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return _citas;
    }
}