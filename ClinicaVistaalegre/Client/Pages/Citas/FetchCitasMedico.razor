@page "/fetchcitasmedico"
@attribute [Authorize(Roles = "Medico")]

<PageTitle>Citas</PageTitle>

@if (citas == null)
{
    <br />
    <div class="d-flex flex-row">
        <div class="p-2 spinner-border text-info" role="status" />
        <div class="p-2">Cargando citas...</div>
    </div>
}
else if (citas.Count == 0)
{
    <text>No hay citas</text>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Operaciones</th>
                <th>Motivo</th>
                <th>Paciente</th>
                <th>Fecha y hora</th>
                <th>Estado</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cita in citas)
            {
                @switch (cita.Estado)
                {
                    case "Cancelada":
                    case "Pasada":
                        rowClass = "table-secondary";
                        break;
                    case "Pendiente":
                        rowClass = "";
                        break;
                    default:
                        rowClass = "table-info";
                        break;
                }

                <tr class="@rowClass">
                    <td class="align-middle">
                        @if (cita.Estado.Equals("Cancelada") || cita.Estado.Equals("Pasada"))
                        {
                            <a class="btn btn-dark" disabled>Cancelar</a>
                        }
                        else
                        {
                            <a class="btn btn-dark" @onclick="(() => CancelarCita(cita.Id))">Cancelar</a>
                        }
                        <a class="btn btn-light" @onclick="(() => BorrarCita(cita.Id))">Borrar</a>
                    </td>
                    <td class="align-middle">@cita.Motivo</td>
                    <td class="align-middle">@cita.Paciente.Apellidos</td>
                    <td class="align-middle">@cita.FechaHora</td>
                    <td class="align-middle">
                        @if (cita.Estado.Equals("Pendiente"))
                        {
                            <a class="btn btn-info" @onclick="(() => AceptarCita(cita.Id))">@cita.Estado</a>
                        }
                        else
                        {
                            @cita.Estado
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string _userId;
    private List<Cita>? citas;
    private string rowClass = "";

    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
        Task.WaitAll();

        citas = await getCitas();

        var timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync(async () =>
            {
               citas = await getCitas();

               StateHasChanged();
            });
        }, null, 0, 5000);
    }

    private async Task BorrarCita(int CitaId)
    {
        var citaBorrada = citas.First(x => x.Id == CitaId);
        string confirmacion = $"¿Deseas borrar la cita con motivo:\n{citaBorrada.Motivo}?";

        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = confirmacion,
                Text = "No será posible recuperar el registro una vez borrado",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, borrar",
                CancelButtonText = "No, volver"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Swal.FireAsync(
              "Borrada",
              "su cita se ha borrado.",
              SweetAlertIcon.Success
              );
            await Http.DeleteAsync($"api/Citas/{CitaId}/{_userId}");
            citas = await getCitas();

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
            await Swal.FireAsync(
              "Cancelada",
              "Operación de borrado candelada. Su cita sigue en vigor.",
              SweetAlertIcon.Error
              );
        }
    }

    private async Task CancelarCita(int CitaId)
    {
        var citaCancelada = citas.First(x => x.Id == CitaId);

        string confirmacion = $"¿Deseas cancelar la cita con motivo:\n{citaCancelada.Motivo}?";
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = confirmacion,
                Text = "No podrá aceptar la cita una vez cancelada",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, cancelar",
                CancelButtonText = "No, volver"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Swal.FireAsync(
              "Cancelada",
              "Su cita se ha cancelado.",
              SweetAlertIcon.Success
              );
            citaCancelada.Estado = "Cancelada";
            await Http.PutAsJsonAsync($"api/Citas/{CitaId}", citaCancelada);
            citas = await getCitas();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
            await Swal.FireAsync(
              "Falsa alarma...",
              "Su cita sigue en vigor.",
              SweetAlertIcon.Error
              );
        }
    }

    private async Task AceptarCita(int CitaId)
    {
        var citaAceptada = citas.First(x => x.Id == CitaId);

        string confirmacion = $"¿Deseas aceptar la cita con motivo:\n{citaAceptada.Motivo}?";

        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = confirmacion,
                Text = "¿Desea aceptar la cita seleccionada?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, aceptar",
                CancelButtonText = "No, volver"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Swal.FireAsync(
              "Aceptada",
              "Su cita se ha aceptado.",
              SweetAlertIcon.Success
              );
            citaAceptada.Estado = "Aceptada";
            await Http.PutAsJsonAsync($"api/Citas/{CitaId}", citaAceptada);
            citas = await getCitas();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
            await Swal.FireAsync(
              "Falsa alarma...",
              "Su cita sigue pendiente.",
              SweetAlertIcon.Error
              );
        }
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        _userId = user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private async Task<List<Cita>> getCitas()
    {
        List<Cita> _citas = new List<Cita>();
        try
        {
            _citas = await Http.GetFromJsonAsync<List<Cita>>($"api/Citas/ByMedico/{_userId}");

            foreach (var cita in _citas)
            {
                if (cita.Paciente == null)
                {
                    cita.Paciente = await Http.GetFromJsonAsync<Paciente>($"api/Pacientes/{cita.PacienteId}");
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return _citas;
    }
}