@page "/chat/{destinatarioId}"
@attribute [Authorize]

<PageTitle>Chat</PageTitle>

<h1>Chat</h1>
@if (mensajes == null)
{
    <div class="d-flex flex-row">
        <div class="p-2 spinner-border text-info" role="status" />
        <div class="p-2">Cargando mensajes...</div>
    </div>
}
else
{
    <div class="table-responsive" id="table-div">
        <table class="table" id="job-table">
            <thead>
                <tr>
                    <AuthorizeView Roles="Medico">
                        <th>@paciente.Apellidos</th>
                    </AuthorizeView>
                    <AuthorizeView Roles="Paciente">
                        <th>@medico.Apellidos</th>
                    </AuthorizeView>
                    <th class="text-end">Tú</th>
                    <th class="text-end"> </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var mensaje in mensajes)
                {
                    <tr>
                        @if (mensaje.Emisor.Equals(_userId))
                        {
                            <td class="align-middle"></td>
                            <td class="align-middle text-end">@mensaje.Contenido</td>
                        }
                        else
                        {
                            <td class="align-middle">@mensaje.Contenido</td>
                            <td class="align-middle text-end"></td>
                        }
                        <td class="align-middle text-end" style="width: 15%">@mensaje.FechaHora</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <EditForm Model="@mensaje" OnValidSubmit="OnValidMensaje">
        <div class="form-group row">
            <div class="my-3 d-flex flex-row justify-content-between">
                <div class="col-sm-10">
                    <InputText id="Contenido" class="form-control" placeholder="Contenido"
                           @bind-Value="mensaje.Contenido" style="@(isSubmitting ? "pointer-events: none" : "")" />
                </div>
                <ValidationMessage For="() => this.mensaje.Contenido"></ValidationMessage>
                <button type="submit" class="btn btn-info" disabled="@isSubmitting">Enviar</button>
            </div>
        </div>
    </EditForm>



}

@code {
    [Parameter] public string destinatarioId { get; set; }

    private string _userId;
    ClaimsPrincipal _user;
    private List<Mensaje>? mensajes;
    private Medico medico;
    private Paciente paciente;
    Mensaje mensaje = new Mensaje();
    bool isSubmitting;

    protected override async Task OnInitializedAsync()
    {
        mensaje = new Mensaje();
        await GetClaimsPrincipalData();
        mensajes = await getMensajes();

        //Refresco de chat
        var timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync(async () =>
       {
       // Add your update logic here
       mensajes = await getMensajes();
       // Update the UI
       StateHasChanged();
       });
        }, null, 0, 5000);
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = authState.User;

        _userId = _user.FindFirst(c => c.Type == "sub")?.Value;
        if (_user.IsInRole("Medico"))
        {
            medico = await Http.GetFromJsonAsync<Medico>($"api/Medicos/{_userId}");
            paciente = await Http.GetFromJsonAsync<Paciente>($"api/Pacientes/{destinatarioId}");
        }
        else
        {
            paciente = await Http.GetFromJsonAsync<Paciente>($"api/Pacientes/{_userId}");
            medico = await Http.GetFromJsonAsync<Medico>($"api/Medicos/{destinatarioId}");
        }
    }

    private async Task OnValidMensaje()
    {
        if (isSubmitting)
            return;

        isSubmitting = true;
        try
        {
            if (mensaje.Contenido != null)
            {
                if (!mensaje.Contenido.Trim().Equals(""))
                {
                    mensaje.FechaHora = DateTime.Now;
                    mensaje.MedicoId = medico.Id;
                    mensaje.PacienteId = paciente.Id;
                    mensaje.Emisor = _userId;
                    await Http.PostAsJsonAsync<Mensaje>("api/Mensajes", mensaje);
                    mensaje = new Mensaje();
                    mensajes = await getMensajes();
                }
            }
            await Task.Delay(200);
        }
        finally
        {
            isSubmitting = false;
        }

    }

    private async Task<List<Mensaje>> getMensajes()
    {
        List<Mensaje> mensajes = new List<Mensaje>();
        try
        {

            mensajes = await Http.GetFromJsonAsync<List<Mensaje>>($"api/Mensajes/Paciente/{paciente.Id}/Medico/{medico.Id}");

            foreach (var mensaje in mensajes)
            {
                mensaje.Paciente = paciente;
                mensaje.Medico = medico;
            }
            ScrollToEnd();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return mensajes;
    }

    void ScrollToEnd() {
        JS.InvokeVoidAsync("scrollToEnd", "table-div");
    } 
}