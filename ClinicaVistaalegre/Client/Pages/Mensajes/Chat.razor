@page "/chat/{destinatarioId}"
@using ClinicaVistaalegre.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@attribute [Authorize]
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Chat</PageTitle>

<h1>Chat</h1>

<div>
    <a class="btn btn-outline-info text-end" onclick="@OnClickActualizar">Comprobar si hay nuevos mensajes</a>
</div>

@if (mensajes == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table" id="job-table">
            <thead>
                <tr>
                    <th>Tú</th>
                    <AuthorizeView Roles="Medico">
                        <th class="text-end">@paciente.Apellidos</th>
                    </AuthorizeView>
                    <AuthorizeView Roles="Paciente">
                        <th class="text-end">@medico.Apellidos</th>
                    </AuthorizeView>
                    <th class="text-end"> </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var mensaje in mensajes)
                {
                    <tr>
                        @if (mensaje.Emisor.Equals(_userId))
                        {
                            <td class="align-middle">@mensaje.Contenido</td>
                            <td class="align-middle text-end"></td>
                        }
                        else
                        {
                            <td class="align-middle"></td>
                            <td class="align-middle text-end">@mensaje.Contenido</td>
                        }
                        <td class="align-middle text-end" style="width: 15%">@mensaje.FechaHora</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <EditForm Model="@mensaje" OnValidSubmit="Enviar">
        <div class="form-group row">
            <div class="my-3 d-flex flex-row justify-content-between">
                <div class="col-sm-10">
                    <InputText id="Contenido" class="form-control" placeholder="Contenido"
                           @bind-Value="mensaje.Contenido" />
                </div>
                <ValidationMessage For="() => this.mensaje.Contenido"></ValidationMessage>
            <button type="submit" class="btn btn-info">Enviar</button>
            </div>
        </div>
    </EditForm>

}

@code {
    [Parameter] public string destinatarioId { get; set; }

    private string _authMessage;
    private string _userId;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    ClaimsPrincipal _user;
    private List<Mensaje>? mensajes;
    private Medico medico;
    private Paciente paciente;
    Mensaje mensaje = new Mensaje();

    protected override async Task OnInitializedAsync()
    {
        mensaje = new Mensaje();
        await GetClaimsPrincipalData();
        mensajes = await getMensajes();
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = authState.User;

        _authMessage = $"{_user.Identity.Name} is authenticated.";
        _claims = _user.Claims;
        _userId = _user.FindFirst(c => c.Type == "sub")?.Value;
        if (_user.IsInRole("Medico"))
        {
            medico = await Http.GetFromJsonAsync<Medico>($"api/Medicos/{_userId}");
            paciente = await Http.GetFromJsonAsync<Paciente>($"api/Pacientes/{destinatarioId}");
        }
        else
        {
            paciente = await Http.GetFromJsonAsync<Paciente>($"api/Pacientes/{_userId}");
            medico = await Http.GetFromJsonAsync<Medico>($"api/Medicos/{destinatarioId}");
        }
    }

    private async void OnClickActualizar()
    {
        mensajes = await getMensajes();
    }

    private async void Enviar()
    {
        if (mensaje.Contenido != null)
        {
            if (!mensaje.Contenido.Trim().Equals(""))
            {
                mensaje.FechaHora = DateTime.Now;
                mensaje.MedicoId = medico.Id;
                mensaje.PacienteId = paciente.Id;
                mensaje.Emisor = _userId;
                await Http.PostAsJsonAsync<Mensaje>("api/Mensajes", mensaje);
                mensaje = new Mensaje();
                mensajes = await getMensajes();
            }
        }

    }

    private void OnChangeInput(ChangeEventArgs args)
    {
        mensaje.Contenido = args.Value.ToString();
    }

    private async Task<List<Mensaje>> getMensajes()
    {
        List<Mensaje> mensajes = new List<Mensaje>();
        try
        {

            mensajes = await Http.GetFromJsonAsync<List<Mensaje>>($"api/Mensajes/Paciente/{paciente.Id}/Medico/{medico.Id}");

            foreach (var mensaje in mensajes)
            {
                mensaje.Paciente = paciente;
                mensaje.Medico = medico;
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return mensajes;
    }
}