@page "/fetchconversaciones"

<PageTitle>Chat</PageTitle>

<h1>Conversaciones</h1>

<div class="row my-3 d-flex flex-row justify-content-between">
    <a class="btn btn-outline-info" href="chat/@destinatarioId" style="@(destinatarioId.Equals("---") ? "pointer-events: none" : "")">Nueva conversacion</a>
    <select id="Medico" onload="@OnChangeDestinatario" onchange="@OnChangeDestinatario" class="form-control" placeholder="Medico">
                
                @if(destinatarios!=null){
                    foreach (var destinatario in destinatarios)
                {
                <option value="@destinatario.Key">@destinatario.Value</option>
            }
        }
        else
        {
            <option value="---">No hay contactos disponibles</option>
        }
    </select>
</div>

@if (conversaciones == null)
{
    <p><em>Cargando...</em></p>
}
else if (conversaciones.Count == 0)
{
    <br />
    <text>No hay conversaciones</text>
}else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Contacto</th>
                <th>Primer mensaje</th>
                <th>Fecha</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var conversacion in conversaciones)
            {
                <tr>
                    <td class="align-middle">
                        <a class="btn btn-info" href="chat/@conversacion.destinatarioId">Abrir</a>
                        <a class="btn btn-light" @onclick="(() => BorrarConversacion(conversacion.destinatarioId))">Borrar</a>
                    </td>
                    <td class="align-middle">@conversacion.Apellidos</td>
                    <td class="align-middle">@conversacion.ContenidoPrimerMensaje</td>
                    <td class="align-middle">@conversacion.FechaUltimoMensaje</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string _authMessage;       
    private string _userId;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private ClaimsPrincipal user;
    private List<Conversacion>? conversaciones;
    private Dictionary<string, string> destinatarios;
    private string destinatarioId = "---";
    private string ButtonIsDisabled = "true";

    protected override async Task OnInitializedAsync()
    {
        GetClaimsPrincipalData();
        conversaciones = await getConversaciones();
        destinatarios = await getDestinatarios();
    }

    private async void OnChangeDestinatario(ChangeEventArgs args)
    {
        if (!args.Value.ToString().Equals("---"))
        {
            ButtonIsDisabled = "false";
            destinatarioId = args.Value.ToString();
        }
        else
        {
            ButtonIsDisabled = "true";
        }
    }

    private async Task BorrarConversacion(string destinatarioId)
    {
        string confirmacion = $"¿Deseas borrar la conversacion seleccionada?";
        if (await JS.InvokeAsync<bool>("confirm", confirmacion))
        {
            if (user.IsInRole("Medico"))
            {
                await Http.DeleteAsync($"api/Mensajes/Paciente/{destinatarioId}/Medico/{_userId}");
            }
            else
            {
                await Http.DeleteAsync($"api/Mensajes/Paciente/{_userId}/Medico/{destinatarioId}");
            }
            conversaciones = await getConversaciones();
        }
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        _authMessage = $"{user.Identity.Name} is authenticated.";
        _claims = user.Claims;
        _userId = user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private async Task<List<Conversacion>> getConversaciones()
    {
        List<Conversacion> _conversaciones = new List<Conversacion>();
        try
        {
            _conversaciones = await Http.GetFromJsonAsync<List<Conversacion>>($"api/Mensajes/ConversacionesByUser/{_userId}");
            foreach(var conversacion in _conversaciones)
            {
                if (user.IsInRole("Medico"))
                {
                    var paciente = await Http.GetFromJsonAsync<Paciente>($"api/Pacientes/{conversacion.destinatarioId}");
                    conversacion.Apellidos= paciente.Apellidos;
                }
                else
                {
                    var medico = await Http.GetFromJsonAsync<Medico>($"api/Medicos/{conversacion.destinatarioId}");
                    conversacion.Apellidos= medico.Apellidos;
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return _conversaciones;
    }

    private async Task<Dictionary<string,string>> getDestinatarios()
    {
        Dictionary<string,string> _destinatarios = new Dictionary<string,string>();
        try
        {
            if (user.IsInRole("Medico"))
            {
                var pacientes = await Http.GetFromJsonAsync<List<Paciente>>($"api/Pacientes");
                foreach(var paciente in pacientes)
                {
                    _destinatarios.Add(paciente.Id, paciente.Apellidos);
                }
            }
            else
            {
                    var medicos = await Http.GetFromJsonAsync<List<Medico>>($"api/Medicos");
                foreach(var medico in medicos)
                {
                    _destinatarios.Add(medico.Id, $"{medico.Apellidos} - {medico.Especialidad.ToUpper()}+");
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return _destinatarios;
    }
}