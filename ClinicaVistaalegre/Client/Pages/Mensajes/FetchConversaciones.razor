@page "/fetchconversaciones"
@using ClinicaVistaalegre.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using ClinicaVistaalegre.Shared
@using System.Security.Claims
@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Citas</PageTitle>

<h1>Listar citas</h1>

<div>
    <a class="btn btn-outline-info" href="creaconversaciones">Nueva cita</a>
</div>

@if (conversaciones == null)
{
    <p><em>Cargando...</em></p>
}
else if (conversaciones.Count == 0)
{
    <text>No hay citas</text>
}else
{
    <table class="table">
        <thead>
            <tr>
                <th>Contacto</th>
                <th>Último mensaje</th>
                <th>Fecha del último mensaje</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var conversacion in conversaciones)
            {
                <tr>
                    <td class="align-middle">
                        <a class="btn btn-info" href="chat/@conversacion.destinatarioId">Abrir</a>
                        <a class="btn btn-light" @onclick="(() => BorrarConversacion(conversacion.destinatarioId))">Borrar</a>
                    </td>
                    <td class="align-middle">@conversacion.Apellidos</td>
                    <td class="align-middle">@conversacion.ContenidoUltimoMensaje</td>
                    <td class="align-middle">@conversacion.FechaUltimoMensaje</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string _authMessage;       
    private string _userId;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private ClaimsPrincipal user;
    private List<Conversacion>? conversaciones;

    protected override async Task OnInitializedAsync()
    {
        GetClaimsPrincipalData();
        conversaciones = await getConversaciones();
    }

    private async Task BorrarConversacion(string destinatarioId)
    {
        string confirmacion = $"¿Deseas borrar la conversacion seleccionada?";
        if (await JS.InvokeAsync<bool>("confirm", confirmacion))
        {
            if (user.IsInRole("Medico"))
            {
                await Http.DeleteAsync($"api/Mensajes/Paciente/{destinatarioId}/Medico/{_userId}");
            }
            else
            {
                await Http.DeleteAsync($"api/Mensajes/Paciente/{_userId}/Medico/{destinatarioId}");
            }
            conversaciones = await getConversaciones();
        }
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _userId = user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private async Task<List<Conversacion>> getConversaciones()
    {
        List<Conversacion> _conversaciones = new List<Conversacion>();
        try
        {
            _conversaciones = await Http.GetFromJsonAsync<List<Conversacion>>($"api/Mensajes/ConversacionesByUser/{_userId}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return _conversaciones;
    }
}